#!/bin/bash

ABS_FILTER="Event: time [0-9]+\.[0-9]+, type [0-9]+ \(EV_ABS\), code [0-9]+ \((ABS_[0-9A-Z]+)\), value (-?[0-9]+)"
BTN_FILTER="Event: time [0-9]+\.[0-9]+, type [0-9]+ \(EV_KEY\), code [0-9]+ \((BTN_[0-9A-Z]+)\), value (0||1)"

source "$2"

abs_update () {
	key=$(echo "$1" | sed -E "s/$ABS_FILTER/\1/")
	value=$(echo "$1" | sed -E "s/$ABS_FILTER/\2/")

	if [ "$key" == "ABS_Z" ]
	then
		trigger_l=$value
	fi

	if [ "$key" == "ABS_RZ" ]
	then
		trigger_r=$value
	fi

	if [ "$key" == "ABS_X" ]
	then
		analog_l_x=$value
	fi

	if [ "$key" == "ABS_Y" ]
	then
		analog_l_y=$value
	fi

	if [ "$key" == "ABS_RX" ]
	then
		analog_r_x=$value
	fi

	if [ "$key" == "ABS_RY" ]
	then
		analog_r_y=$value
	fi

	if [ "$key" == "ABS_HAT0X" ]
	then
		dpad_x=$value
	fi

	if [ "$key" == "ABS_HAT0Y" ]
	then
		dpad_y=$value
	fi
}

btn_update () {
	key=$(echo "$1" | sed -E "s/$BTN_FILTER/\1/")
	value=$(echo "$1" | sed -E "s/$BTN_FILTER/\2/")

	if [ "$key" == "BTN_SOUTH" ]
	then
		a=$value
	fi

	if [ "$key" == "BTN_EAST" ]
	then
		b=$value
	fi

	if [ "$key" == "BTN_NORTH" ]
	then
		x=$value
	fi

	if [ "$key" == "BTN_WEST" ]
	then
		y=$value
	fi

	if [ "$key" == "BTN_START" ]
	then
		st=$value
	fi

	if [ "$key" == "BTN_SELECT" ]
	then
		sl=$value
	fi

	if [ "$key" == "BTN_THUMBL" ]
	then
		tl=$value
	fi

	if [ "$key" == "BTN_THUMBR" ]
	then
		tr=$value
	fi

	if [ "$key" == "BTN_MODE" ]
	then
		m=$value
	fi
}

trigger_l=0
trigger_r=0
analog_l_x=0
analog_l_y=0
analog_r_x=0
analog_r_y=0
dpad_x=0
dpad_y=0
a=0
b=0
x=0
y=0
st=0
sl=0
tl=0
tr=0
m=0

export_state () {
echo "
trigger_l=$trigger_l
trigger_r=$trigger_r
analog_l_x=$analog_l_x
analog_l_y=$analog_l_y
analog_r_x=$analog_r_x
analog_r_y=$analog_r_y
dpad_x=$dpad_x
dpad_y=$dpad_y
a=$a
b=$b
x=$x
y=$y
st=$st
sl=$sl
tl=$tl
tr=$tr
m=$m
" > "$1"
}

export_file="/tmp/$(uuidgen)_controller_display"
touch "$export_file"

evtest "$1" | while read -r LINE
do
	ABS_UPDATE=$(echo $LINE | grep -E "$ABS_FILTER")
	BTN_UPDATE=$(echo $LINE | grep -E "$BTN_FILTER")
	if [ -n "$ABS_UPDATE" ]
	then
		abs_update "$LINE"
	fi

	if [ -n "$BTN_UPDATE" ]
	then
		btn_update "$LINE"
	fi

	if [ -n "$ABS_UPDATE" ] || [ -n "$BTN_UPDATE" ]
	then
		export_state "$export_file"
	fi
done &
POLLER_PID=$!
echo $POLLER_PID > /tmp/poller_pid

clear
file_missing=0
echo "begin" | while true
do
	if [ -e "$export_file" ]
	then
		file_missing=0
		source "$export_file"
		sleep 0.03
		state=$(draw_state)
		clear
		echo "$state"
	else
		file_missing=$((file_missing + 1))
		if [ $file_missing -gt 200 ]
		then
			break
		fi
	fi
done &
PRINTER_PID=$!
echo $PRINTER_PID > /tmp/printer_pid

trap interrupt INT
function interrupt () {
	kill $POLLER_PID
	kill $PRINTER_PID
	rm "$export_file"
	echo
	exit 0
}

while read -r LINE
do
	if [ "$LINE" == "q" ]
	then
		break
	fi
done

interrupt
