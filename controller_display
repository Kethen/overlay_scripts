#!/bin/bash

ABS_FILTER="Event: time [0-9]+\.[0-9]+, type [0-9]+ \(EV_ABS\), code [0-9]+ \((ABS_[0-9A-Z]+)\), value (-?[0-9]+)"
BTN_FILTER="Event: time [0-9]+\.[0-9]+, type [0-9]+ \(EV_KEY\), code [0-9]+ \((BTN_[0-9A-Z]+)\), value (0||1)"


abs_update () {
	key=$(echo "$1" | sed -E "s/$ABS_FILTER/\1/")
	value=$(echo "$1" | sed -E "s/$ABS_FILTER/\2/")

	# log value of interest
	if [ "$key" == "ABS_Z" ]
	then
		trigger_l=$value
	fi

	if [ "$key" == "ABS_RZ" ]
	then
		trigger_r=$value
	fi

	if [ "$key" == "ABS_X" ]
	then
		analog=$value
	fi
}

btn_update () {
	key=$(echo "$1" | sed -E "s/$BTN_FILTER/\1/")
	value=$(echo "$1" | sed -E "s/$BTN_FILTER/\2/")

	# log value of interest
	if [ "$key" == "BTN_SOUTH" ]
	then
		a=$value
	fi

	if [ "$key" == "BTN_EAST" ]
	then
		b=$value
	fi

	if [ "$key" == "BTN_NORTH" ]
	then
		x=$value
	fi
}

render_steering () {
	value=$1
	right=0
	left=0
	scale=20
	if [ "${value:0:1}" == "-" ]
	then
		value="${value:1:99}"
		left=$((value * scale / 32768))
	else
		right=$((value * scale / 32767))
	fi
	echo -n "L|"
	left=$((scale - left))
	idx=$scale
	while [ $idx -gt 0 ]
	do
		if [ $left -gt 0 ]
		then
			echo -n "-"
			left=$((left - 1))
		else
			echo -n "<"
		fi
		idx=$((idx - 1))
	done
	echo -n "|"
	idx=$scale
	while [ $idx -gt 0 ]
	do
		if [ $right -gt 0 ]
		then
			echo -n ">"
			right=$((right - 1))
		else
			echo -n "-"
		fi
		idx=$((idx - 1))
	done
	echo -n "|R"
}

render_throttle () {
	value=$1
	scale=43
	max=255
	value=$((value * scale / max))
	idx=$scale
	echo -n "|"
	while [ $idx -gt 0 ]
	do
		if [ $value -gt 0 ]
		then
			echo -n ">"
			value=$((value - 1))
		else
			echo -n "-"
		fi
		idx=$((idx - 1))
	done
	echo -n "|"
}

render_button () {
	if [ -z "$1" ]
	then
		value=0
	else
		value=$1
	fi

	if [ $value -eq 0 ]
	then
		echo -n "-"
	else
		echo -n "X"
	fi
}

draw_state () {
	# print controller state
	echo brake: "$(render_throttle $trigger_l)"
	echo gas: "$(render_throttle $trigger_r)"
	echo down shift: "$(render_button $a)"
	echo up shift: "$(render_button $x)"
	echo hand brake: "$(render_button $b)"
	echo steering: "$(render_steering $analog)"
}

evtest "$1" | while read -r LINE
do
	ABS_UPDATE=$(echo $LINE | grep -E "$ABS_FILTER")
	BTN_UPDATE=$(echo $LINE | grep -E "$BTN_FILTER")
	if [ -n "$ABS_UPDATE" ]
	then
		abs_update "$LINE"
	fi

	if [ -n "$BTN_UPDATE" ]
	then
		btn_update "$LINE"
	fi
	state=$(draw_state)
	clear
	echo "$state"
done
